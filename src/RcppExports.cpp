// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sgn
int sgn(const double x);
RcppExport SEXP _rAutoARR_sgn(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sgn(x));
    return rcpp_result_gen;
END_RCPP
}
// f1
double f1(const double x, const arma::vec& resSq, const int n, const double rhs);
RcppExport SEXP _rAutoARR_f1(SEXP xSEXP, SEXP resSqSEXP, SEXP nSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(f1(x, resSq, n, rhs));
    return rcpp_result_gen;
END_RCPP
}
// rootf1
double rootf1(const arma::vec& resSq, const int n, const double rhs, double low, double up, const double tol, const int maxIte);
RcppExport SEXP _rAutoARR_rootf1(SEXP resSqSEXP, SEXP nSEXP, SEXP rhsSEXP, SEXP lowSEXP, SEXP upSEXP, SEXP tolSEXP, SEXP maxIteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIte(maxIteSEXP);
    rcpp_result_gen = Rcpp::wrap(rootf1(resSq, n, rhs, low, up, tol, maxIte));
    return rcpp_result_gen;
END_RCPP
}
// f2
double f2(const double x, const arma::vec& resSq, const int N, const double rhs);
RcppExport SEXP _rAutoARR_f2(SEXP xSEXP, SEXP resSqSEXP, SEXP NSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(f2(x, resSq, N, rhs));
    return rcpp_result_gen;
END_RCPP
}
// rootf2
double rootf2(const arma::vec& resSq, const int n, const int d, const int N, const double rhs, double low, double up, const double tol, const int maxIte);
RcppExport SEXP _rAutoARR_rootf2(SEXP resSqSEXP, SEXP nSEXP, SEXP dSEXP, SEXP NSEXP, SEXP rhsSEXP, SEXP lowSEXP, SEXP upSEXP, SEXP tolSEXP, SEXP maxIteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIte(maxIteSEXP);
    rcpp_result_gen = Rcpp::wrap(rootf2(resSq, n, d, N, rhs, low, up, tol, maxIte));
    return rcpp_result_gen;
END_RCPP
}
// g1
double g1(const double x, const arma::vec& resSq, const int n, const double rhs);
RcppExport SEXP _rAutoARR_g1(SEXP xSEXP, SEXP resSqSEXP, SEXP nSEXP, SEXP rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(g1(x, resSq, n, rhs));
    return rcpp_result_gen;
END_RCPP
}
// rootg1
double rootg1(const arma::vec& resSq, const int n, const double rhs, double low, double up, const double tol, const int maxIte);
RcppExport SEXP _rAutoARR_rootg1(SEXP resSqSEXP, SEXP nSEXP, SEXP rhsSEXP, SEXP lowSEXP, SEXP upSEXP, SEXP tolSEXP, SEXP maxIteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type resSq(resSqSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIte(maxIteSEXP);
    rcpp_result_gen = Rcpp::wrap(rootg1(resSq, n, rhs, low, up, tol, maxIte));
    return rcpp_result_gen;
END_RCPP
}
// huberDer
double huberDer(const arma::vec& res, const double tau, const int n);
RcppExport SEXP _rAutoARR_huberDer(SEXP resSEXP, SEXP tauSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type res(resSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(huberDer(res, tau, n));
    return rcpp_result_gen;
END_RCPP
}
// huberMean
double huberMean(arma::vec X, const double tol, const int iteMax);
RcppExport SEXP _rAutoARR_huberMean(SEXP XSEXP, SEXP tolSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberMean(X, tol, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// hMeanCov
double hMeanCov(const arma::vec& Z, const int n, const int d, const int N, double rhs, const double epsilon, const int iteMax);
RcppExport SEXP _rAutoARR_hMeanCov(SEXP ZSEXP, SEXP nSEXP, SEXP dSEXP, SEXP NSEXP, SEXP rhsSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(hMeanCov(Z, n, d, N, rhs, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberCov
Rcpp::List huberCov(const arma::mat& X);
RcppExport SEXP _rAutoARR_huberCov(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(huberCov(X));
    return rcpp_result_gen;
END_RCPP
}
// mad
double mad(const arma::vec& x);
RcppExport SEXP _rAutoARR_mad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mad(x));
    return rcpp_result_gen;
END_RCPP
}
// standardize
arma::mat standardize(arma::mat X, const arma::rowvec& mx, const arma::vec& sx, const int p);
RcppExport SEXP _rAutoARR_standardize(SEXP XSEXP, SEXP mxSEXP, SEXP sxSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mx(mxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(standardize(X, mx, sx, p));
    return rcpp_result_gen;
END_RCPP
}
// updateHuber
void updateHuber(const arma::mat& Z, const arma::vec& res, arma::vec& der, arma::vec& grad, const int n, const double tau, const double n1);
RcppExport SEXP _rAutoARR_updateHuber(SEXP ZSEXP, SEXP resSEXP, SEXP derSEXP, SEXP gradSEXP, SEXP nSEXP, SEXP tauSEXP, SEXP n1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type der(derSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type n1(n1SEXP);
    updateHuber(Z, res, der, grad, n, tau, n1);
    return R_NilValue;
END_RCPP
}
// adaHuberReg
arma::vec adaHuberReg(const arma::mat& X, arma::vec Y, const double tol, const int iteMax);
RcppExport SEXP _rAutoARR_adaHuberReg(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(adaHuberReg(X, Y, tol, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// huberReg
arma::vec huberReg(const arma::mat& X, arma::vec Y, const double tol, const double constTau, const int iteMax);
RcppExport SEXP _rAutoARR_huberReg(SEXP XSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP constTauSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type constTau(constTauSEXP);
    Rcpp::traits::input_parameter< const int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(huberReg(X, Y, tol, constTau, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// LnVal
double LnVal(const arma::vec& Y, double mu, double tau, const int n, double z);
RcppExport SEXP _rAutoARR_LnVal(SEXP YSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP nSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(LnVal(Y, mu, tau, n, z));
    return rcpp_result_gen;
END_RCPP
}
// gradientMuVal
double gradientMuVal(const arma::vec& Y, double mu, double tau, const int n, double z);
RcppExport SEXP _rAutoARR_gradientMuVal(SEXP YSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP nSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientMuVal(Y, mu, tau, n, z));
    return rcpp_result_gen;
END_RCPP
}
// gradientTauVal
double gradientTauVal(const arma::vec& Y, double mu, double tau, const int n, double z);
RcppExport SEXP _rAutoARR_gradientTauVal(SEXP YSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP nSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientTauVal(Y, mu, tau, n, z));
    return rcpp_result_gen;
END_RCPP
}
// agd
double agd(const arma::vec& Y, double epsilon, int iteMax);
RcppExport SEXP _rAutoARR_agd(SEXP YSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(agd(Y, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// agdBB
double agdBB(const arma::vec& Y, double epsilon, int iteMax);
RcppExport SEXP _rAutoARR_agdBB(SEXP YSEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(agdBB(Y, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}
// agdBacktracking
double agdBacktracking(const arma::vec& Y, double s1, double gamma1, double beta1, double s2, double gamma2, double beta2, double epsilon, int iteMax);
RcppExport SEXP _rAutoARR_agdBacktracking(SEXP YSEXP, SEXP s1SEXP, SEXP gamma1SEXP, SEXP beta1SEXP, SEXP s2SEXP, SEXP gamma2SEXP, SEXP beta2SEXP, SEXP epsilonSEXP, SEXP iteMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type iteMax(iteMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(agdBacktracking(Y, s1, gamma1, beta1, s2, gamma2, beta2, epsilon, iteMax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rAutoARR_sgn", (DL_FUNC) &_rAutoARR_sgn, 1},
    {"_rAutoARR_f1", (DL_FUNC) &_rAutoARR_f1, 4},
    {"_rAutoARR_rootf1", (DL_FUNC) &_rAutoARR_rootf1, 7},
    {"_rAutoARR_f2", (DL_FUNC) &_rAutoARR_f2, 4},
    {"_rAutoARR_rootf2", (DL_FUNC) &_rAutoARR_rootf2, 9},
    {"_rAutoARR_g1", (DL_FUNC) &_rAutoARR_g1, 4},
    {"_rAutoARR_rootg1", (DL_FUNC) &_rAutoARR_rootg1, 7},
    {"_rAutoARR_huberDer", (DL_FUNC) &_rAutoARR_huberDer, 3},
    {"_rAutoARR_huberMean", (DL_FUNC) &_rAutoARR_huberMean, 3},
    {"_rAutoARR_hMeanCov", (DL_FUNC) &_rAutoARR_hMeanCov, 7},
    {"_rAutoARR_huberCov", (DL_FUNC) &_rAutoARR_huberCov, 1},
    {"_rAutoARR_mad", (DL_FUNC) &_rAutoARR_mad, 1},
    {"_rAutoARR_standardize", (DL_FUNC) &_rAutoARR_standardize, 4},
    {"_rAutoARR_updateHuber", (DL_FUNC) &_rAutoARR_updateHuber, 7},
    {"_rAutoARR_adaHuberReg", (DL_FUNC) &_rAutoARR_adaHuberReg, 4},
    {"_rAutoARR_huberReg", (DL_FUNC) &_rAutoARR_huberReg, 5},
    {"_rAutoARR_LnVal", (DL_FUNC) &_rAutoARR_LnVal, 5},
    {"_rAutoARR_gradientMuVal", (DL_FUNC) &_rAutoARR_gradientMuVal, 5},
    {"_rAutoARR_gradientTauVal", (DL_FUNC) &_rAutoARR_gradientTauVal, 5},
    {"_rAutoARR_agd", (DL_FUNC) &_rAutoARR_agd, 3},
    {"_rAutoARR_agdBB", (DL_FUNC) &_rAutoARR_agdBB, 3},
    {"_rAutoARR_agdBacktracking", (DL_FUNC) &_rAutoARR_agdBacktracking, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_rAutoARR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
